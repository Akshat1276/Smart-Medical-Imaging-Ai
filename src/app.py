import streamlit as st
from utils.predict import load_trained_model, predict_image
from model.gradcam import get_img_array, make_gradcam_heatmap
from assistant.assistant import ask_assistant
from PIL import Image
import numpy as np
import os
from tensorflow.keras.models import load_model
from utils.pdf_report import generate_pdf_report, DISEASE_INFO
import tempfile

MODEL_PATH = "model/model.h5"
LAST_CONV_LAYER = "conv5_block16_2_conv"

DISCLAIMER = (
    "Disclaimer: This report is generated by an AI model and is for informational purposes only. "
    "It is not a substitute for professional medical advice, diagnosis, or treatment. "
    "Always consult a qualified healthcare provider with any questions you may have regarding a medical condition."
)

st.set_page_config(page_title="Smart Medical Imaging AI", layout="wide")
st.title("Smart Medical Imaging AI")

st.sidebar.header("AI Assistant")
user_query = st.sidebar.text_input("Ask a medical question:")
if user_query:
    answer = ask_assistant(user_query)
    st.sidebar.write("Assistant:", answer)

uploaded_file = st.file_uploader("Upload a chest X-ray", type=["png", "jpg", "jpeg"])
if uploaded_file:
    img = Image.open(uploaded_file)
    img.save("temp.png")

    model = load_model("model/model.h5")
    label, probs = predict_image(model, "temp.png")
    st.write(f"**Prediction:** {label}")
    st.write(f"**Probabilities:** {probs}")

    img_array = get_img_array("temp.png", (224, 224))
    heatmap = make_gradcam_heatmap(img_array, model, LAST_CONV_LAYER)
    st.image(img, caption="Uploaded X-ray")

    if isinstance(heatmap, np.ndarray):
        # Normalize and convert to uint8
        heatmap_min = heatmap.min()
        heatmap_max = heatmap.max()
        if heatmap_max > heatmap_min:
            heatmap = (255 * (heatmap - heatmap_min) / (heatmap_max - heatmap_min)).astype(np.uint8)
        else:
            heatmap = np.zeros_like(heatmap, dtype=np.uint8)
        heatmap = Image.fromarray(heatmap).convert("RGB")
    st.image(heatmap, caption="Grad-CAM Heatmap", width=heatmap.width // 2)

    disease_details = DISEASE_INFO.get(label.lower(), None)
    if disease_details:
        st.markdown(f"### Disease Information: {disease_details['name']}")
        st.write(f"**Symptoms:** {disease_details['symptoms']}")
        st.write(f"**Causes:** {disease_details['causes']}")
        st.write(f"**Cure:** {disease_details['cure']}")

    patient_name = st.text_input("Enter patient name for the report:", value="Anonymous")

    if st.button("Generate PDF Report"):
        prob_dict = {cls: float(prob) for cls, prob in zip(['covid19', 'pneumonia', 'tuberculosis', 'normal'], probs)}
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile:
            generate_pdf_report(
                patient_name=patient_name,
                prediction=label,
                probabilities=prob_dict,
                disclaimer=DISCLAIMER,
                output_path=tmpfile.name,
                xray_image_path="temp.png",
                disease_details=disease_details
            )
            with open(tmpfile.name, "rb") as f:
                st.download_button(
                    label="Download your PDF report",
                    data=f,
                    file_name="medical_ai_report.pdf",
                    mime="application/pdf"
                )
        os.remove("temp.png")
    else:
        os.remove("temp.png")

st.markdown(f"**{DISCLAIMER}**")